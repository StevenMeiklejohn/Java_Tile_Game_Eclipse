package com.codeclan.entities.creatures;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import com.codeclan.Handler;
import com.codeclan.entities.Entity;
import com.codeclan.entities.statics.StaticAnimatedExplosion1;
import com.codeclan.entities.statics.StaticAnimatedLaser1;
import com.codeclan.entities.statics.StaticAnimatedLaser2;
import com.codeclan.gfx.Animation;
import com.codeclan.gfx.Assets;
import com.codeclan.tilegame.Game;

public class Player extends Creature {
//	Animation
	private Animation anim;
	private Animation laser_anim;
	private AnimatedLaser1 laser;
	int life;
	StaticAnimatedExplosion1 exp;

	

	public Player(Handler handler, float x, float y) {
//		changing these defaults for numbers allows us to re-size the player object.
		super(handler, x, y, Creature.DEFAULT_CREATURE_WIDTH, Creature.DEFAULT_CREATURE_HEIGHT);
// 		setup bounding box.	
//		bounding box co-ords relative to entity 0, 0.
		bounds.x = 5;
		bounds.y = 25;
//		size of bounding box inside player tile.
		bounds.width = 50;
		bounds.height = 15;
		anim = new Animation(300, Assets.player_ani);
		laser_anim = new Animation(100, Assets.laser1_ani);
		life = 6;

		
	}

//	Updates all variables
	@Override
	public void update() {
//		Animation
		anim.update();
		getInput();
		checkPlayerAtBoundary();
//		move();
		handler.getGameCamera().centerOnEntity(this);
//		Attack
		checkAttacks();
		checkHit();

	}
	
	
//	Our attack will checked by generating a temporary collision box in the direction of attack.
//	Should it intersect with other collison boxes, they will ne damaged.
	private void checkAttacks(){
		Rectangle cb = getCollisionBounds(0,0);
		Rectangle ar = new Rectangle();
		
		if(handler.getKeyManager().fire){
		ar.x = cb.x = ar.width;
		ar.y = cb.y = ar.height;
		laser = new AnimatedLaser1(handler, this.x + 40, this.y);
		handler.getWorld().getEntityManager().addEntity(laser);
		}

		for(Entity e : handler.getWorld().getEntityManager().getEntities()){
			if(e.equals(this))
				continue;
			if(e.getCollisionBounds(0, 0).intersects(ar)){
				e.die();
			}
		}
	}
	
	private void checkHit(){
		Rectangle cb = getCollisionBounds(0,0);
		Rectangle ar = new Rectangle();
		bounds.x = 5;
		bounds.y = 25;
//		size of bounding box inside player tile.
		bounds.width = 50;
		bounds.height = 15;
		ar.x = (int) (cb.x - (handler.getGameCamera().getxOffset()));
		ar.y = (int) (cb.y - (handler.getGameCamera().getxOffset()));
		ar.width = 50;
		ar.height = 15;

		for(Entity e : handler.getWorld().getEntityManager().getEntities()){

			if(e.getCollisionBounds(0, 0).intersects(ar)){
				this.die();
			}
		}
	}
	
	private void checkPlayerAtBoundary(){
		if(this.x < 0)
			this.x = 1;
		if(this.x > 580)
			this.x = 579;
		if(this.y < 0)
			this.y = 0;
		if(this.y > 580)
			this.y = 579;
		else{
			move();
		}
	}
	
	public StaticAnimatedExplosion1 generateExplosion(float x, float y){
		 exp = new StaticAnimatedExplosion1(handler, x, y);
			return exp;
		}
	
	@Override
	public void die(){
		System.out.println("Player die called");
		
//		handler.getWorld().getExplosionManager().addEntity(generateExplosion(this.x, this.y));
		handler.getWorld().getEntityManager().getPlayerManager().removeCreature(this);
//		handler.getWorld().getEntityManager().getPlayerManaager()
//		setLives(-1);
//		if(this.life <= 0){
//			gameOver();
//		}
	}
	
	
	public void gameOver(){
		System.out.println("Game over triggered");
		handler.getWorld().getExplosionManager().addEntity(generateExplosion(this.x, this.y));
		handler.getWorld().getEntityManager().removeCreature(this);
	}
	
	private void getInput(){
		xMove = 0;
		yMove = 0;
		if(handler.getKeyManager().up)
			yMove = -speed;
		if(handler.getKeyManager().down)
			yMove = speed;
		if(handler.getKeyManager().left)
			xMove = -speed;
		if(handler.getKeyManager().right)
			xMove = speed;
	}


	@Override
	public void render(Graphics g) {
//		use casting to convert int variable to float (as defined by entity)
		g.drawImage(getCurrentAnimationFrame(), 
				(int) (x - handler.getGameCamera().getxOffset()), 
				(int) (y - handler.getGameCamera().getyOffset()), width, height, null);
		g.setColor(Color.red);
		g.fillRect((int) (x + bounds.x - handler.getGameCamera().getxOffset()), 
				(int) (y + bounds.y - handler.getGameCamera().getyOffset()),
				bounds.width, bounds.height);
	}
	
	
//	this method would be modified (perhaps with if statements)
//	if our player used different animations for different input
//	i.e. direction of travel or firing.
	public BufferedImage getCurrentAnimationFrame(){
		return anim.getCurrentFrame();
		
//		if(cMove < 0){
//			return animLeft.getCurrentAnimationFrame();
//		}else if{
//			(xMove > 0){
//				return animRight.getCurrentAnimationFrame();
//			}else if{
//				(yMove < 0){
//					return animUp.getCurrentAnimationFrame();
//				}else if{
//					yMove > 0){
//						animDown.getCurrentAnimationFrame();
//					}
//				}
//			}
//		}
	}
	
	public int getRuns(){
		return 0;
	}
	
	public int getLives(){
		return this.life;
	}
	
	public void setLives(int change){
		this.life += change;
	}
	

	
	

}
