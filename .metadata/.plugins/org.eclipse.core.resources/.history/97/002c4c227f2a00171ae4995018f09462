package com.codeclan.entities;

import java.awt.Graphics;
import java.awt.Rectangle;

import com.codeclan.Handler;
import com.codeclan.gfx.Animation;
import com.codeclan.gfx.Assets;
import com.codeclan.tilegame.Game;

public abstract class Entity {

	protected Animation anim;
	protected Handler handler;
	protected float x, y;
	protected int width, height;
	protected Rectangle bounds;
	protected int health;
	protected String name;
	public static final int DEFAULT_HEALTH = 10;
//	active entities (true) will appear on screen, (false) will be removed.
	protected boolean active = true;
	int runs;

	
	public Entity(Handler handler, float x, float y, int width, int height){
		this.health = DEFAULT_HEALTH;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.handler = handler;
		anim = new Animation(100, Assets.laser1_ani);
		runs = 0;

//	Every entity initialised with a bounding (collision detection box) the same size as the entity.
		bounds = new Rectangle(0, 0, width, height);
	}
	

	public abstract void update();
	public abstract void render(Graphics g);
	
	public abstract void die();
	
	public void hurt(int amount){
		health -= amount;
		if(health <= 0)
			active = false;
		die();
	}
	
//	public boolean checkEntityCollisions(float xOffset, float yOffset){
//		boolean trigger = false;
//		for(Entity e : handler.getWorld().getEntityManager().getEntities()){
////			avoid current entity checking for collisions with itself while looping round entities.
//			if(e.equals(this))
//				continue;
//			if(e.getCollisionBounds(0f, 0f).intersects(getCollisionBounds(xOffset, yOffset)))
//				System.out.println("entity collison triggered");
//				trigger = true;
//		}
//			
//
//				return trigger;
//		}
	
	public boolean checkEntityCollisions(float xOffset, float yOffset){
		
		for(Entity e : handler.getWorld().getEntityManager().getEntities()){
			for(Entity e2 : handler.getWorld().getLaserManager().getEntities()){
//			avoid current entity checking for collisions with itself while looping round entities.
			if(e.equals(this)||e2.equals(this));
				System.out.println("e collison triggered");
				continue;
			}
			if(e.getCollisionBounds(0f, 0f).intersects(getCollisionBounds(xOffset, yOffset))||
					e2.getCollisionBounds(0f, 0f).intersects(getCollisionBounds(xOffset, yOffset)))
				System.out.println("e2 collison triggered");
				return true;
		}
			return false;
		}
			


		
	
//	for (ArrayList<Integer> list : row1)
//	{
//	    for (Integer num : list)
//	    {
//	        //doSomething
//	    }
//	}
		
	
	
	public Rectangle getCollisionBounds(float xOffset, float yOffset){
		return new Rectangle((int) (x+bounds.x + xOffset), (int) (y + bounds.y + yOffset), bounds.width, bounds.height);
		
	}
	
	
//	Getters and Setters
	
	public int getRuns(){
		return runs;
	}
	
	public String getName(){
		return name;
	}
	
	
	public int getHealth() {
		return health;
	}


	public void setHealth(int health) {
		this.health = health;
	}


	public boolean isActive() {
		return active;
	}


	public void setActive(boolean active) {
		this.active = active;
	}


	public float getX() {
		return x;
	}


	public void setX(float x) {
		this.x = x;
	}


	public float getY() {
		return y;
	}


	public void setY(float y) {
		this.y = y;
	}


	public int getWidth() {
		return width;
	}


	public void setWidth(int width) {
		this.width = width;
	}


	public int getHeight() {
		return height;
	}


	public void setHeight(int height) {
		this.height = height;
	}
	
	public long getTotalLoopTime(){
		return anim.getTotalLoopTime();
	}




}
